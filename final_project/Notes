

maven doesn't need to add all needed libraries, if you add one dependency, this dependency will pull all the libraries
that it needs to fully function, so when you added the entity manager dependency, you did not need to add the 
persistence api dependency, the entity manager one pulled it for you. because it needs it to work.

DAY 2/17/2020

/*
	hbm2ddl.auto value is nothing because if it is validation the datatypes of the table and the entities in java 
	must match, since the datatypes in the table are char, and in the java entities they are strings, we should
	not validate.
*/

<property name="hibernate.hbm2ddl.auto" value=""/>  <!-- value="validate" -->


next tasks are:

1) change strings to chars for datatypes in java, because strings are varchar in database, so if you want to enter 
	something from the java app to the database, you may enter something that is of more characters than the database 
	specified, that is why it is horrible, so if you enter a string like 'Alexander' into a column with datatype char (3)
	it will mess up the database, because this is an invalid thing to do

2) tick the value validate for hbm2ddl, so datatypes are conformant

3) create the rest of the services and connection with consumer info 

4) also you can create the junit tests.

5) think about spring and springboot. after you finish


DAY 02/18/2020

datatype mapping from sql server to java
https://docs.microsoft.com/en-us/sql/language-extensions/how-to/java-to-sql-data-types?view=sql-server-ver15

- in case string is bigger than the associated length of datatype in sql server, trim it, after you ask the 
	user, this should be low on coupling, so there should be wrappers that handle the logic, or 
	handle them in the setter, that is what setters are for. each setter has its own length constraints, there is 
	no redundancy
	
	
	
